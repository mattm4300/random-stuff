printf("starting grab.\n");
// Setup.
size_t *currentSize = malloc(sizeof(size_t));
*currentSize = 1;
char *str = malloc(*currentSize);
if(str == 0) {
     Fatal("Could not allocate memory for string.\n");
}
strcpy(str, "");
// Note the use of readChar, not readRawChar here to skip over
// whitespace to the next non-whitespace character or EOF.
printf("attempting first read\n");
char spot = readChar(fp);
printf("read\n");
// EOF
if(spot == -1) { return NULL; }
// Token
if(spot != '\"') {
     printf("reading token\n");
     while(!isspace(spot) && spot != -1) {
          printf("building: %s\n", str);
          spot = cleanChar(spot);
          if(spot != 0) {
               addCharToString(str, currentSize, spot);
          }
          spot = readRawChar(fp);
          if(isspace(spot)) break;
     }
     printf("token read.\n");
// String
} else {
     printf("reading string\n");
     char lastSpot = spot;
     // Toss the quotation mark.
     spot = readRawChar(fp);
     while(spot != '\"') {
          printf("building string: %s\n", str);
          printf("current char: %c\n", spot);
          if(!isspace(spot)) {
               printf("cleaning char: %c\n", spot);
               spot = cleanChar(spot);
               printf("char cleaned to: %c\n", spot);
               if(spot != 0) {
                    printf("adding char to string: %c\n", spot);
                    addCharToString(str, currentSize, spot);
                    printf("char added.\n");
                    lastSpot = spot;
               }
               spot = readRawChar(fp);
          } else if(isspace(spot) && !isspace(lastSpot)) {
               addCharToString(str, currentSize, ' ');
               lastSpot = ' ';
               spot = readRawChar(fp);
          } else if(isspace(spot) && isspace(lastSpot)) {
               spot = readRawChar(fp);
          }
     }
     printf("string read\n");
}
// If last thing read from file was quoted string, we probably read
// an empty string now or a token of all invalid characters,
// so check for empty string.
if(strlen(str) == 0) {
     free(str);
     free(currentSize);
     return NULL;
}

// Cleanup.
printf("returning: %s\n", str);
string *retString = newString(str);
free(str);
free(currentSize);


return retString;
